package com.secusociale.provider;

import com.secusociale.entity.User;
import com.secusociale.repository.UserRepository;
import com.secusociale.util.BCryptUtil;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;

@DisplayName("Tests d'int√©gration du provider Keycloak")
class ProviderIntegrationTest {

    @Test
    @DisplayName("Test complet du flux d'authentification")
    void testCompleteAuthenticationFlow() {
        System.out.println("=== Test complet du flux d'authentification ===");
        
        // 1. Simuler la recherche d'utilisateur par username
        System.out.println("1. üîç Recherche de l'utilisateur 'admin'...");
        
        // Simuler un utilisateur admin trouv√© dans la base
        User adminUser = new User();
        adminUser.setId(1L);
        adminUser.setLogin("admin");
        adminUser.setEmail("admin@example.com");
        adminUser.setFirstName("Admin");
        adminUser.setLastName("User");
        adminUser.setActivated(true);
        adminUser.setLocked(false);
        adminUser.setHasPasswordUpdated(true);
        
        // Hash BCrypt pour le mot de passe "admin"
        BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
        String adminPasswordHash = encoder.encode("admin");
        adminUser.setPassword(adminPasswordHash);
        
        System.out.println("   ‚úÖ Utilisateur trouv√©: " + adminUser.getLogin());
        System.out.println("   üìß Email: " + adminUser.getEmail());
        System.out.println("   üîë Hash: " + adminPasswordHash.substring(0, 20) + "...");
        
        // 2. V√©rifications de s√©curit√©
        System.out.println("2. üõ°Ô∏è V√©rifications de s√©curit√©...");
        assertTrue(adminUser.isActivated(), "L'utilisateur doit √™tre activ√©");
        assertFalse(adminUser.isLocked(), "L'utilisateur ne doit pas √™tre verrouill√©");
        System.out.println("   ‚úÖ Utilisateur activ√© et non verrouill√©");
        
        // 3. Validation du format du hash
        System.out.println("3. üîç Validation du format du hash...");
        assertTrue(BCryptUtil.isBCryptHash(adminUser.getPassword()), "Le hash doit √™tre un BCrypt valide");
        System.out.println("   ‚úÖ Format BCrypt valide (co√ªt: " + BCryptUtil.getCost(adminUser.getPassword()) + ")");
        
        // 4. Test d'authentification avec le bon mot de passe
        System.out.println("4. üîê Test d'authentification avec mot de passe correct...");
        String inputPassword = "admin";
        boolean authSuccess = BCryptUtil.matches(inputPassword, adminUser.getPassword());
        assertTrue(authSuccess, "L'authentification devrait r√©ussir avec le bon mot de passe");
        System.out.println("   ‚úÖ Authentification R√âUSSIE avec 'admin'");
        
        // 5. Test d'authentification avec un mauvais mot de passe
        System.out.println("5. ‚ùå Test d'authentification avec mot de passe incorrect...");
        boolean authFail = BCryptUtil.matches("wrongpassword", adminUser.getPassword());
        assertFalse(authFail, "L'authentification devrait √©chouer avec un mauvais mot de passe");
        System.out.println("   ‚úÖ Authentification √âCHOU√âE avec mauvais mot de passe (comportement attendu)");
        
        System.out.println("\nüéâ FLUX D'AUTHENTIFICATION COMPLET VALID√â !");
    }

    @Test
    @DisplayName("Test de simulation Keycloak UserAdapter")
    void testKeycloakUserAdapter() {
        System.out.println("\n=== Test de simulation UserAdapter Keycloak ===");
        
        // Cr√©er un utilisateur test
        User testUser = new User();
        testUser.setId(1L);
        testUser.setLogin("admin");
        testUser.setEmail("admin@example.com");
        testUser.setFirstName("Admin");
        testUser.setLastName("User");
        testUser.setActivated(true);
        testUser.setLocked(false);
        testUser.setPhone("123456789");
        testUser.setTypeCompte("ADMIN");
        testUser.setInstitution("IPRES");
        testUser.setAgence("DAKAR");
        
        // Hash du mot de passe
        BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
        testUser.setPassword(encoder.encode("admin"));
        
        // Simuler ce que Keycloak verrait
        System.out.println("Informations utilisateur pour Keycloak:");
        System.out.println("  - ID: " + testUser.getId());
        System.out.println("  - Username: " + testUser.getLogin());
        System.out.println("  - Email: " + testUser.getEmail());
        System.out.println("  - Nom complet: " + testUser.getFirstName() + " " + testUser.getLastName());
        System.out.println("  - Activ√©: " + testUser.isActivated());
        System.out.println("  - T√©l√©phone: " + testUser.getPhone());
        System.out.println("  - Type compte: " + testUser.getTypeCompte());
        System.out.println("  - Institution: " + testUser.getInstitution());
        System.out.println("  - Agence: " + testUser.getAgence());
        
        // V√©rifier que les informations sont correctes
        assertNotNull(testUser.getLogin(), "Le username ne doit pas √™tre null");
        assertNotNull(testUser.getEmail(), "L'email ne doit pas √™tre null");
        assertTrue(testUser.isActivated(), "L'utilisateur doit √™tre activ√©");
        
        System.out.println("‚úÖ UserAdapter simulation r√©ussie");
    }

    @Test
    @DisplayName("Test de v√©rification des logs d'authentification")
    void testAuthenticationLogs() {
        System.out.println("\n=== Test des logs d'authentification ===");
        
        // Simuler diff√©rents sc√©narios d'authentification
        String[] scenarios = {
            "Utilisateur valide avec bon mot de passe",
            "Utilisateur valide avec mauvais mot de passe", 
            "Utilisateur non activ√©",
            "Utilisateur verrouill√©",
            "Hash de mot de passe invalide"
        };
        
        for (int i = 0; i < scenarios.length; i++) {
            System.out.println((i + 1) + ". " + scenarios[i]);
            
            User user = new User();
            user.setLogin("testuser" + i);
            user.setEmail("test" + i + "@example.com");
            
            boolean expectedResult = false;
            String testPassword = "testpass";
            
            switch (i) {
                case 0: // Utilisateur valide avec bon mot de passe
                    user.setActivated(true);
                    user.setLocked(false);
                    user.setPassword(new BCryptPasswordEncoder().encode(testPassword));
                    expectedResult = true;
                    break;
                    
                case 1: // Utilisateur valide avec mauvais mot de passe
                    user.setActivated(true);
                    user.setLocked(false);
                    user.setPassword(new BCryptPasswordEncoder().encode("differentpassword"));
                    expectedResult = false;
                    break;
                    
                case 2: // Utilisateur non activ√©
                    user.setActivated(false);
                    user.setLocked(false);
                    user.setPassword(new BCryptPasswordEncoder().encode(testPassword));
                    expectedResult = false;
                    break;
                    
                case 3: // Utilisateur verrouill√©
                    user.setActivated(true);
                    user.setLocked(true);
                    user.setPassword(new BCryptPasswordEncoder().encode(testPassword));
                    expectedResult = false;
                    break;
                    
                case 4: // Hash invalide
                    user.setActivated(true);
                    user.setLocked(false);
                    user.setPassword("plaintext_password"); // Hash invalide
                    expectedResult = false;
                    break;
            }
            
            boolean result = simulateAuthentication(user, testPassword);
            assertEquals(expectedResult, result, "R√©sultat inattendu pour le sc√©nario: " + scenarios[i]);
            
            System.out.println("   " + (result ? "‚úÖ" : "‚ùå") + " R√©sultat: " + result + " (attendu: " + expectedResult + ")");
        }
        
        System.out.println("‚úÖ Tous les sc√©narios de logs test√©s");
    }

    private boolean simulateAuthentication(User user, String inputPassword) {
        // Simulation de la logique du CustomUserStorageProvider.isValid()
        
        // V√©rifications de s√©curit√©
        if (!user.isActivated()) {
            return false;
        }
        
        if (user.isLocked()) {
            return false;
        }
        
        String storedPassword = user.getPassword();
        if (storedPassword == null || storedPassword.trim().isEmpty()) {
            return false;
        }
        
        if (!BCryptUtil.isBCryptHash(storedPassword)) {
            return false;
        }
        
        return BCryptUtil.matches(inputPassword, storedPassword);
    }

    @Test
    @DisplayName("Guide de v√©rification dans Keycloak")
    void testKeycloakVerificationGuide() {
        System.out.println("\n=== GUIDE DE V√âRIFICATION DANS KEYCLOAK ===");
        
        System.out.println("Pour v√©rifier que votre provider fonctionne correctement:");
        System.out.println();
        
        System.out.println("1. üîß CONFIGURATION DU PROVIDER:");
        System.out.println("   - Allez dans Admin Console ‚Üí Votre Realm ‚Üí User Federation");
        System.out.println("   - Ajoutez 'ndamli-provider'");
        System.out.println("   - Configurez la base de donn√©es MySQL");
        System.out.println("   - Cliquez sur 'Test connection' ‚Üí devrait √™tre vert ‚úÖ");
        System.out.println("   - Sauvegardez");
        System.out.println();
        
        System.out.println("2. üë§ V√âRIFICATION DES UTILISATEURS:");
        System.out.println("   - Allez dans Users ‚Üí View all users");
        System.out.println("   - Vous devriez voir vos utilisateurs de la base externe");
        System.out.println("   - Cliquez sur 'admin' ‚Üí onglet Details");
        System.out.println("   - V√©rifiez que les informations sont correctes");
        System.out.println();
        
        System.out.println("3. üîê V√âRIFICATION DES CREDENTIALS:");
        System.out.println("   - Dans l'utilisateur 'admin' ‚Üí onglet Credentials");
        System.out.println("   - MESSAGE ATTENDU: 'No credentials' ‚Üê C'EST NORMAL ! ‚úÖ");
        System.out.println("   - Cela signifie que Keycloak utilise votre provider externe");
        System.out.println("   - Les mots de passe restent dans votre base MySQL");
        System.out.println();
        
        System.out.println("4. üß™ TEST D'AUTHENTIFICATION:");
        System.out.println("   - Ouvrez un onglet priv√©/incognito");
        System.out.println("   - Allez sur votre application ou Account Console");
        System.out.println("   - Connectez-vous avec: admin / admin");
        System.out.println("   - L'authentification devrait R√âUSSIR ‚úÖ");
        System.out.println();
        
        System.out.println("5. üìä V√âRIFICATION DES LOGS:");
        System.out.println("   - Regardez les logs Keycloak");
        System.out.println("   - Vous devriez voir des messages avec emojis:");
        System.out.println("     üîê D√©but de validation des credentials pour l'utilisateur: admin");
        System.out.println("     ‚úÖ Utilisateur trouv√©: admin (ID: 1)");
        System.out.println("     ‚úÖ Authentification R√âUSSIE pour l'utilisateur: admin");
        System.out.println();
        
        System.out.println("6. ‚ùå SI √áA NE FONCTIONNE PAS:");
        System.out.println("   - V√©rifiez les logs Keycloak pour les erreurs");
        System.out.println("   - V√©rifiez la connexion √† la base de donn√©es");
        System.out.println("   - V√©rifiez que l'utilisateur 'admin' existe et est activ√©");
        System.out.println("   - V√©rifiez que le mot de passe est bien hash√© en BCrypt");
        System.out.println();
        
        System.out.println("üéØ R√âSUM√â:");
        System.out.println("   ‚úÖ 'No credentials' dans Keycloak = COMPORTEMENT NORMAL");
        System.out.println("   ‚úÖ Vos mots de passe restent dans votre base MySQL");
        System.out.println("   ‚úÖ L'authentification se fait via votre provider");
        System.out.println("   ‚úÖ Les utilisateurs gardent leurs mots de passe actuels");
        
        assertTrue(true, "Guide affich√© avec succ√®s");
    }
}